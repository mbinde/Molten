#!/bin/bash
#
# Image Downloader - Run from anywhere to download product images
#
# This script downloads product images from manufacturer websites to the
# project's Resources/product-images directory.
#
# By default, it skips images that already exist. Use --all to force re-download.
#
# Usage:
#   images              # Download missing images only (default)
#   images --all        # Force re-download all images
#   images --test       # Test mode (download only 3 images)

# Absolute paths
SCRIPT_DIR="/Users/binde/Library/Mobile Documents/com~apple~CloudDocs/Molten/Molten/Tools/Scraping Tools"
JSON_FILE="$SCRIPT_DIR/glassitems-export.json"
FINAL_IMAGE_DIR="/Users/binde/Library/Mobile Documents/com~apple~CloudDocs/Molten/Molten/Sources/Resources/product-images"

# Create final image directory if it doesn't exist
mkdir -p "$FINAL_IMAGE_DIR"

# Change to final image directory so downloads go there
cd "$FINAL_IMAGE_DIR" || exit 1

echo "======================================================================"
echo "               PRODUCT IMAGE DOWNLOADER"
echo "======================================================================"
echo ""
echo "Downloading to: $FINAL_IMAGE_DIR"
echo ""

# Parse arguments
FORCE_FLAG=""
if [[ " $* " =~ " --all " ]]; then
    FORCE_FLAG="--force"
    echo "Mode: Re-downloading all images (--force)"
else
    echo "Mode: Skipping existing images (use --all to force re-download)"
fi

# Check if JSON file exists
if [ ! -f "$JSON_FILE" ]; then
    echo "❌ Error: JSON file not found at $JSON_FILE"
    echo ""
    echo "Run 'scrape' first to generate the product database."
    exit 1
fi

# Run image downloader with appropriate flags
# Note: We're already in the target directory, and image_downloader.py
# creates a 'product-images' subdirectory, so we need to work around this
cd "$SCRIPT_DIR" || exit 1

# Temporarily override the output directory by modifying behavior
# We'll download to a temp location then move files
TEMP_DIR="$FINAL_IMAGE_DIR"

# Run the downloader - it will create product-images/ subdirectory
python3 image_downloader.py "$JSON_FILE" $FORCE_FLAG "$@"

# Check if the downloader created a subdirectory
if [ -d "$SCRIPT_DIR/product-images" ]; then
    echo ""
    echo "Moving images to final location..."

    # Move images from product-images/ to the final directory
    mv "$SCRIPT_DIR/product-images"/* "$FINAL_IMAGE_DIR/" 2>/dev/null

    # Remove the temporary subdirectory
    rmdir "$SCRIPT_DIR/product-images" 2>/dev/null

    echo "✅ Images downloaded to $FINAL_IMAGE_DIR"
else
    echo "✅ Images already in place or no new images downloaded"
fi

echo ""
echo "Done! Product images are ready for use in the Molten app."
